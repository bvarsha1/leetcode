*2272. Substring With Largest Variance

Solution :

class Solution {
    HashMap<Character, Integer> chMap = new HashMap();
    
    public int largestVariance(String s) {
        // modified sliding window approach to maximize the difference in variance
        // expansion  - auto/ keeps expanding and storing maxFreq
        // contraction to maximize the diff
        
        if(s.length() <= 1) return 0;
        
        for(char ch : s.toCharArray()) {
            chMap.put(ch, chMap.getOrDefault(ch, 0) + 1);
        }
        
        // all unique characters case
        if(s.length() == chMap.size())
            return 0;
        
        int max = 0;
        // for every character in map
        for(char ch1 : chMap.keySet()) {
            // for every other character in map
            for(char ch2 : chMap.keySet()) {
                if(ch1 == ch2) continue;
                
                int ch1Freq = 0, ch2Freq = 0; // initialise their respective frequencies till now to 0
                // lets fix ch1 and ch2 and we want to maximise for this combo
                int ch1Rem = chMap.get(ch1); // initialise the remaining frequency of ch1 in the string to overall freq in string
                
                // start an iteration over the string
                for(char c : s.toCharArray()) {
                    // if c is the ch1 then we inc freq and dec remaining count
                    if(c == ch1) {
                        ch1Freq++;
                        ch1Rem--;
                    }
                    
                    if(c == ch2)
                        ch2Freq++;
                    
                    // contract/discard string if freq of ch1 > freq of ch2 and there are more ch1's in the string
                    if(ch1Freq > ch2Freq && ch1Rem > 0) {
                        ch1Freq = 0;
                        ch2Freq = 0;
                    }
                    
                    if(ch1Freq > 0 && ch2Freq > 0) {
                        max = Math.max(max, ch2Freq - ch1Freq);
                    }
                }
            }
        }
        // end of all loops
        return max;
    }
}