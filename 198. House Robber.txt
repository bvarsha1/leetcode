*198. House Robber

Solution : 

class Solution {
    public int rob(int[] houses) {
        
        if(houses.length <= 0) return 0;
        
        if(houses.length == 1) return houses[0];
        
        // int[] dp = new int[houses.length];
        // return robTD(houses, 0, dp);
        
        return robBU(houses);
    }
    
    // getting TLE
    public int robTD(int[] houses, int currHouse, int[] dp) {
        // base case
        if(currHouse >= houses.length)
            return 0;
        
        // memoization
        if(dp[currHouse] != 0)
            return dp[currHouse];
        
        // rec case
        int robCurrHouse = houses[currHouse] + robTD(houses, currHouse + 2, dp);
        int skipCurrHouse = robTD(houses, currHouse + 1, dp);
        
        dp[currHouse] = Math.max(robCurrHouse, skipCurrHouse);
        return dp[currHouse];
    }
    
    public int robBU(int[] houses) {
        int[] dp = new int[houses.length];
        
        dp[0] = houses[0];
        dp[1] = Math.max(houses[0], houses[1]);
        
        for(int i = 2; i < houses.length; i++) {
            int robCurr = houses[i] + dp[i - 2];
            int skipCurr = dp[i - 1];
            dp[i] = Math.max(robCurr, skipCurr);
        }
        
        return dp[houses.length - 1];
    }
}