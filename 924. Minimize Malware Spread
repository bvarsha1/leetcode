// 924. Minimize Malware Spread

class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        // get number of nodes
        int n = graph.length;
        // initialize a color array, depicting the color of a node
        int[] colors = new int[n];
        Arrays.fill(colors, -1);

        int c = 0;
        // run dfs on all infected nodes and recursively the connected nodes
        for(int i = 0; i < n; i++) {
            if(colors[i] == -1)
                dfs(graph, colors, i, c++);
        }

        // find number of nodes for each color
        int[] size = new int[c];
        for(int i = 0; i < n; i++)
            size[colors[i]]++;

        // find infected nodes with unique color
        int[] colorCount = new int[c];
        for(int node : initial)
            colorCount[colors[node]]++;

        // choose the node
        int ans = Integer.MAX_VALUE;
        for(int node : initial) {
            int nc = colors[node]; // getting current node color
            if(
                colorCount[nc] == 1 &&
                (
                    ans == Integer.MAX_VALUE ||
                    size[nc] > size[colors[ans]] ||
                    (size[nc] == size[colors[ans]] && node < ans)
                )
            ) {
                ans = node;
            }
        }

        if(ans == Integer.MAX_VALUE) {
            for(int node : initial)
                ans = Math.min(ans, node);
        }

        return ans;
    }

    public void dfs(int[][] graph, int[] colors, int node, int color) {
        colors[node] = color;

        for(int j = 0; j < graph.length; j++) {
            if(graph[node][j] == 1 && colors[j] == -1)
                dfs(graph, colors, j, color);
        }
    }
}