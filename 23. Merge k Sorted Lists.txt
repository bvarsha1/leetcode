*23. Merge k Sorted Lists

Solution : 

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) {
            return null;
        }
        // Use the 0-th list as a return list
        for (int i = 1; i < lists.length; ++i) {
            lists[0] = merge2ListsIter(lists[0], lists[i]);
        }

        return lists[0];
    }
    
    public ListNode merge2ListsIter(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode();
        ListNode prev = dummy;
        
        while(list1 != null && list2 != null) {
            if(list1.val < list2.val) {
                prev.next = list1;
                list1 = list1.next;
            } else {
                prev.next = list2;
                list2 = list2.next;
            }
            prev = prev.next;
        }
        
        prev.next = (list1 == null) ? list2 : list1;
        
        return dummy.next;
    }
    
    public ListNode merge2ListsRecur(ListNode list1, ListNode list2) {
        if(list1 == null)
            return list2;
        
        if(list2 == null)
            return list1;
        
        ListNode list3;
        
        if(list1.val < list2.val) {
            list3 = list1;
            list3.next = merge2ListsRecur(list1.next, list2);
        } else {
            list3 = list2;
            list3.next = merge2ListsRecur(list1, list2.next);
        }
        
        return list3;
    }
}