*236. Lowest Common Ancestor of a Binary Tree

Solution : 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null) return null;
        
        // start processing node
        // if the node is one of p and q we simply return that node
        if(root == p || root == q) {
            return root;
        }
        
        // calculate left and right LCA
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        
        // if both of them are non-null values - the node is the LCA
        if(left != null && right != null) return root;
        
        // if one of them were found, return that node
        return (left != null) ? left : right;
    }
}