// 366. Find Leaves of Binary Tree

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> findLeaves(TreeNode root) {
        List<List<Integer>> result = new ArrayList();
        dfs(root, result);

        return result;
    }

    public int dfs(TreeNode root, List<List<Integer>> result) {
        if(root == null)
            return -1;

        int hl = dfs(root.left, result);
        int hr = dfs(root.right, result);

        // calc current height
        int curr = Math.max(hl, hr) + 1;

        // add new list to result if list doesnt exist for curr
        if(curr >= result.size()) {
            result.add(new ArrayList<Integer>());
        }

        // add the node val to curr height
        result.get(curr).add(root.val);
        return curr;
    }
}