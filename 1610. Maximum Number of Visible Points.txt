*1610. Maximum Number of Visible Points

Solution : 

class Solution {
    public int visiblePoints(List<List<Integer>> points, int angle, List<Integer> location) {
        // if angle form a full circle we return entire array
        if(angle >= 360) return points.size();
        
        // initialize counter
        int count = 0;
        // store in terms of angles
        List<Double> angles = new ArrayList();
        for(List<Integer> point : points) {
            Double a = getAngle(location, point);
            if(a != null)
                angles.add(a);
            else
                count++;
        }
        
        // sort the angles, so we can traverse using sliding window
        Collections.sort(angles);
        
        // think of sliding window in terms of expansion and contraction
        // we do expansion regardless, but under certain condition we do contraction
        // edge case for angle range in < 360 & > 360
        List<Double> temp = new ArrayList<>(angles);
        for(double d : angles) temp.add(d + 360);
        
        int i = 0, j = 0;
        int ans = count;
        for(; j < temp.size(); j++) {
            while(temp.get(j) - temp.get(i) > angle) {
                i++; // contraction
            }
            int windowPts = j - i + 1; // number of points in the window after evaluation
            ans = Math.max(ans, count + windowPts);
        }
        
        return ans;
    }
    
    public Double getAngle(List<Integer> location, List<Integer> point) {
        int dx = point.get(0) - location.get(0);
        int dy = point.get(1) - location.get(1);
        
        if(dx == 0 && dy == 0) // its the same as location, return null
            return null;
        
        Double angle = Math.atan2(dy, dx) * 180 / Math.PI;
        
        return angle;
    }
}