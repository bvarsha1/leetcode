*329. Longest Increasing Path in a Matrix

Solution : 

class Solution {
    final int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    int[][] dp;
    int m, n;
    
    public int longestIncreasingPath(int[][] matrix) {
        m = matrix.length;
        n = matrix[0].length;
        dp = new int[m][n];
        
        int ans = 0;
        for(int i = 0; i < m; i++)
            for(int j = 0; j < n; j++)
                ans = Math.max(ans, dfs(matrix, i, j));
        
        return ans;
    }
    
    public int dfs(int[][] matrix, int i, int j) {
        // memoization
        if(dp[i][j] != 0)
            return dp[i][j];
        
        for(int[] dir : dirs) {
            int x = i + dir[0];
            int y = j + dir[1];
            
            if(x >= 0 && x < m && y >= 0 && y < n && matrix[x][y] > matrix[i][j]) {
                dp[i][j] = Math.max(dp[i][j], dfs(matrix, x, y));
            }
        }
        
        // we increment because by default every single element forms a min LIS of 1
        return ++dp[i][j];
    }
}