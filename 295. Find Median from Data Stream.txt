*295. Find Median from Data Stream

Solitions: 

class MedianFinder {
    PriorityQueue<Integer> leftHeap; // this has to be max heap
    PriorityQueue<Integer> rightHeap; // this min heap
    
    public MedianFinder() {
        leftHeap = new PriorityQueue( new Comparator<Integer>(){
            @Override
            public int compare(Integer a, Integer b) {
                return b - a;
            }
        });
        rightHeap = new PriorityQueue();
    }
    
    public void addNum(int num) {
        // by default always add first to leftHeap
        if(leftHeap.size() == rightHeap.size()) {
            leftHeap.offer(num);
            rightHeap.offer(leftHeap.poll());
        } else {
            rightHeap.offer(num);
            leftHeap.offer(rightHeap.poll());
        }
    }
    
    public double findMedian() {
        return leftHeap.size() == rightHeap.size() ? ((double) leftHeap.peek() + rightHeap.peek()) * 0.5 : rightHeap.peek();
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */