*84. Largest Rectangle in Histogram

Solution : 

class Solution {
    public int largestRectangleArea(int[] heights) {
        // max area a single block can contribute is block height * range in which it acts min
        // this is because the area vertically is determiined with the min block being included fully for calc
        
        if(heights.length == 0) return 0;
        if(heights.length == 1) return heights[0];
        
        Stack<Integer> mono = new Stack();
        
        int[] left = new int[heights.length];
        int[] right = new int[heights.length];
        
        // fill in left limits in terms of indices
        for(int i = 0; i < heights.length; i++) {
            while(!mono.isEmpty() && heights[mono.peek()] >= heights[i]) {
                mono.pop();
            }
            left[i] = (!mono.isEmpty()) ? mono.peek() + 1 : 0; 
            mono.push(i);
        }
        
        // fill in right limits in terms of indices
        mono.clear();
        for(int i = heights.length - 1; i >= 0 ; i--) {
            while(!mono.isEmpty() && heights[mono.peek()] >= heights[i]) {
                mono.pop();
            }
            right[i] = (!mono.isEmpty()) ? mono.peek() - 1 : heights.length - 1;
            mono.push(i);
        }
        
        int max = Integer.MIN_VALUE;
        for(int i = 0; i < heights.length; i++) {
            max = Math.max(max, heights[i]*(right[i] - left[i] + 1));
        }
        
        return max;
    }
}