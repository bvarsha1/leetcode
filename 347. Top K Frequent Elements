// 347. Top K Frequent Elements

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        if(k == nums.length)
            return nums;

        HashMap<Integer, Integer> freq = new HashMap();
        for(int n : nums) {
            freq.put(n, freq.getOrDefault(n, 0) + 1);
        }

        PriorityQueue<Integer> heap = new PriorityQueue<>(
            (n1, n2) -> Integer.compare(freq.get(n1), freq.get(n2))
        );

        // add only K top to heap, poll least freq ones (first one if size > k)
        for(int n : freq.keySet()) {
            heap.offer(n);
            if(heap.size() > k)
                heap.poll();
        }

        int[] top = new int[k];
        for(int i = k - 1; i >= 0; i--)
            top[i] = heap.poll();

        return top;
    }
}