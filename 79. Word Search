// 79. Word Search

class Solution {
    public boolean exist(char[][] board, String word) {
        int m = board.length;
        int n = board[0].length;

        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(board[i][j] == word.charAt(0)) {
                    if(dfs(board, word, i, j, 0))
                        return true;
                }
            }
        }
        
        return false;
    }

    public boolean dfs(char[][] board, String word, int x, int y, int stri) {
        // base
        if(stri == word.length()) return true;

        // out of bounds check or char doesnt match
        if(x < 0 || x >= board.length || y < 0 || y >= board[0].length || board[x][y] != word.charAt(stri)) {
            return false;
        }

        // store char on board temporarily and replace with #
        char temp = board[x][y];
        board[x][y] = '#';

        // dfs on neighboars
        boolean exists = dfs(board, word, x + 1, y, stri + 1) ||
            dfs(board, word, x - 1, y, stri + 1) ||
            dfs(board, word, x, y + 1, stri + 1) ||
            dfs(board, word, x, y - 1, stri + 1);

        board[x][y] = temp;
        return exists;
    }
}