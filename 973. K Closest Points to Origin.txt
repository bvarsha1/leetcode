*973. K Closest Points to Origin

Solution :

class Solution {
    public int[][] kClosest(int[][] points, int k) {
        PriorityQueue<Point> pq = new PriorityQueue( new Comparator<Point>() {
            @Override
            public int compare(Point p1, Point p2) {
                return ((p1.x*p1.x) + (p1.y*p1.y)) - ((p2.x*p2.x) + (p2.y*p2.y));
            }
        });
        
        for(int[] point : points) {
            Point p = new Point(point[0], point[1]);
            pq.offer(p);
        }
        
        int[][] result = new int[k][2];
        for(int i = 0; i < k; i++) {
            Point p = pq.poll();
            result[i][0] = p.x;
            result[i][1] = p.y;
        }
        
        return result;
    }
    
    //lesser space complexity
    public int[][] kClosest1(int[][] points, int k) {
        Arrays.sort(points, new Comparator<int[]>() {
            @Override
            public int compare(int[] p1, int[] p2 ) {
                return (p1[0]*p1[0] + p1[1]*p1[1]) -
                    (p2[0]*p2[0] + p2[1]*p2[1]);
            }
        });
        
        int[][] kPoints = new int[k][2];
        for(int i = 0; i < k; i++)
            kPoints[i] = points[i];
        
        return kPoints;
    }
}

class Point {
    int x;
    int y;
    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
}