*1937. Maximum Number of Points with Cost

Solution : 

class Solution {
    public long maxPoints(int[][] points) {
        int rows = points.length;
        int cols = points[0].length;
        
        long[] dp = new long[cols];
        for(int j = 0; j < cols; j++) {
            dp[j] = points[0][j];
        }

        for( int i = 1; i < rows; i++) {
            long[] leftMax = new long[cols];
            leftMax[0] = dp[0];
            long[] rightMax = new long[cols];
            rightMax[cols - 1] = dp[cols - 1];
            
            // while traversing from left we calculate the max that can be obtained by even subtracting cost
            for(int j = 1; j < cols; j++)
                leftMax[j] = Math.max(leftMax[j - 1] - 1, dp[j]);
            
            // while traversing from right we calculate the max that can be obtained by even subtracting cost
            for(int j = cols - 2; j >= 0; j--)
                rightMax[j] = Math.max(rightMax[j + 1] - 1, dp[j]);
            
            // we calculate the dp
            for(int j = 0; j < cols; j++)
                dp[j] = points[i][j] + Math.max(leftMax[j], rightMax[j]);
        }
        
        long ans = 0;
        for( int i = 0; i < cols; i++) {
            ans = Math.max(dp[i], ans);
        }
        
        return ans;
    }
}