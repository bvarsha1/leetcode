*322. Coin Change

Solution : 

class Solution {
    public int coinChange(int[] coins, int amount) {
        return coinChangeBU(coins, amount);
        
        // int[] dp = new int[amount + 1];
        // Arrays.fill(dp, Integer.MAX_VALUE);
        // int ans = coinChangeTD(coins, amount, dp);
        // return (ans == Integer.MAX_VALUE ) ? -1 : ans;
    }
    
    public int coinChangeBU(int[] coins, int amount) {
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        // base state value
        dp[0] = 0;

        for(int i = 1; i <= amount; i++) {
            for(int coin : coins) {
                if(i - coin >= 0 && dp[i - coin] != Integer.MAX_VALUE)
                    dp[i] = Math.min(dp[i], dp[i - coin] + 1);
            }
        }

        return (dp[amount] == Integer.MAX_VALUE) ? -1 : dp[amount];
    }

    public int coinChangeTD(int[] coins, int amount, int[] dp) {
        // base case
        if(amount == 0) return 0;

        // memoization
        if(dp[amount] != Integer.MAX_VALUE)
            return dp[amount];

        int ans = Integer.MAX_VALUE;
        for(int coin : coins) {
            if(amount - coin >= 0) {
                ans = Math.min(ans, coinChangeTD(coins, amount - coin, dp));
            }
        }

        if(ans != Integer.MAX_VALUE)
            dp[amount] = ans + 1;

        return dp[amount];
    }
}