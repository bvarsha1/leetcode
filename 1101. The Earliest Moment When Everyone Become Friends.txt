*1101. The Earliest Moment When Everyone Become Friends

Solution : 

class Solution {
    int[][] dSet;
    public int earliestAcq(int[][] logs, int n) {
        // we would store parent and rank in the 2nd dim.
        dSet = new int[n][2];
        // fill disjoint set with default values
        for(int i = 0; i < n; i++){
            dSet[i][0] = -1;
            dSet[i][1] = 0;
        }
        
        //sort logs by timestamps
        Arrays.sort(logs, (a, b) -> a[0] - b[0]);
        
        // keep a count of the number of unions
        int ans = 0;
        for(int[] log : logs) {
            if(union(log[1], log[2])) {
                ans = log[0];
                n--;
            }
        }
        return (n > 1) ? -1 : ans;
    }
    
    public int find(int a) {
        if(dSet[a][0] == -1)
            return a;
        int temp = find(dSet[a][0]);
        dSet[a][0] = temp;
        return temp;
    }
    
    public boolean union(int a, int b) {
        int absP1 = find(a);
        int absP2 = find(b);

        if(absP1 == absP2) return false;
        
        if(dSet[absP1][1] < dSet[absP2][1]) {
            // set parent of smaller set to abs parent of larger set
            dSet[absP1][0] = absP2;
            // rank doesnt change here
        } else if(dSet[absP1][1] > dSet[absP2][1]) {
            dSet[absP2][0] = absP1;
        } else {
            dSet[absP1][0] = absP2;
            dSet[absP1][1] += 1;
        }
        return true;
    }
}