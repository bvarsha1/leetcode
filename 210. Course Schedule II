// 210. Course Schedule II

class Solution {
    public int[] getCourseOrderByKahns(int numCourses, ArrayList<ArrayList<Integer>> adjList, int[] indegree) {
        int[] ans = new int[numCourses];
        Queue<Integer> q = new ArrayDeque<>();
        for(int i = 0; i < indegree.length; i++) {
            if(indegree[i] == 0)
                q.offer(i);
        }

        int cnt = 0;
        while(!q.isEmpty()) {
            int curr = q.poll();
            for(int nbr :  adjList.get(curr)) {
                indegree[nbr]--;
                if(indegree[nbr] == 0) q.offer(nbr);
            }
            ans[cnt++] = curr;
        }

        return (cnt == numCourses) ? ans : new int[] {};
    }

    public int[] findOrder(int numCourses, int[][] prereqs) {
        ArrayList<ArrayList<Integer>> adjList = new ArrayList();
        // initialising adj list
        for(int i = 0; i < numCourses; i++) {
            adjList.add(i, new ArrayList<Integer>());
        }

        // populating adjList and indegree
        int[] indegree = new int[numCourses];
        for(int[] pre : prereqs) {
            adjList.get(pre[1]).add(pre[0]);
            indegree[pre[0]]++;
        }

        int[] result = getCourseOrderByKahns(numCourses, adjList, indegree);
        return result;
    }
}