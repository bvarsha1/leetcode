*45. Jump Game II

Solution : 

class Solution {
    // https://www.youtube.com/watch?v=dJ7sWiOoK7g
    public int jump(int[] nums) {
        // int[] dp = new int[nums.length];
        // Arrays.fill(dp, Integer.MAX_VALUE);
        // return jumpTD(nums, 0, dp);
        
        // Approach 2 - greedy approach
        int left = 0, right = 0;
        int res = 0;
        
        while(right < nums.length - 1) {
            int farthest = 0;
            for(int i = left; i <= right; i++) {
                farthest = Math.max(farthest, i + nums[i]);
            }
            left = right + 1;
            right = farthest;
            res += 1;
        }
        
        return res;
    }
    
    // DP - TC - O(n * n)
    public int jumpTD(int[] nums, int i, int[] dp) {
        // base case
        if(i >= nums.length - 1) return 0;
        
        // memoization
        if(dp[i] != Integer.MAX_VALUE) return dp[i];
        
        // edge case
        if(nums[i] == 0) return Integer.MAX_VALUE;
        
        int maxJump = nums[i];
        for(int j = 1; j <= maxJump; j++) {
            int currAns = jumpTD(nums, i + j, dp);
            if(currAns != Integer.MAX_VALUE)
                dp[i] = Math.min(1 + currAns, dp[i]);
        }
        
        return dp[i];
    }
}