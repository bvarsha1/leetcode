*1730. Shortest Path to Get Food

Solution : 

class Solution {
    int[][] dirs = new int[][]{{1,0},{0,1},{-1,0},{0,-1}};

    public int getFood(char[][] grid) {
        // bfs approach for shortest path
        int m = grid.length;
	    int n = grid[0].length;
        
        //boolean[][] visited = new boolean[][]
        Queue<int[]> q = new ArrayDeque();
        
        // determine the starting point
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == '*') {
                    q.offer(new int[]{i, j});
                    break;
                }
            }
        }

        boolean[][] visited = new boolean[m][n];
        
        // bfs
        int step = 0;
        while(!q.isEmpty()) {
            //process for each level
            int qSize = q.size();
            for(int i = 0; i < qSize; i++) {
                // remove the topmost item for processing
                int[] curr = q.poll();
                int x = curr[0], y = curr[1];
                
                if(grid[x][y] == '#') {
                    return step;         
                }

                for(int[] dir : dirs) {
                    int nx = x + dir[0];
                    int ny = y + dir[1];

                    // continue if neighbour is not valid or cannot be traversed (in-case its obstacle)
                    if(isValid(grid, nx, ny) && !visited[nx][ny]) {
                        visited[nx][ny] = true;
                        q.offer(new int[]{nx , ny});
                    }
                }
                // marking the curr cell as visited by marking it obstacle
                //grid[x][y] = 'X';
            }
            step++;
        }
        
        // if it does not succeed in the loop, it reaches here, and hence we return -1
        return -1;
    }
    
    public boolean isValid(char[][] grid, int x, int y) {
        return (x >= 0 && x < grid.length && y >= 0 && y < grid[0].length && grid[x][y] != 'X');
    }
}